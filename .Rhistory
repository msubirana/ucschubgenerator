file.copy(paste0(track, '.tbi'), file.path(path_local_hub_name, assembly_database))
}
exists(paste0(track, '.tbi'))
exists(paste0(track, '.tbi'))
paste0(track, '.tbi')
track
file.copy(paste0(track, '.tbi'), file.path(path_local_hub_name, assembly_database))
# copy '.tbi' if the file is 'vcf.gz'
gsub(".*:","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub(".*.","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub(".*.","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub("..*","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub("*.","",track)
track
# copy '.tbi' if the file is 'vcf.gz'
gsub("*..","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub(".*.","",track)
# copy '.tbi' if the file is 'vcf.gz'
gsub(".*..","",track)
# copy '.tbi' if the file is 'vcf.gz'
sub('.*.', '', track)
# copy '.tbi' if the file is 'vcf.gz'
sub('.*..', '', track)
# copy '.tbi' if the file is 'vcf.gz'
sub('..*..', '', track)
# copy '.tbi' if the file is 'vcf.gz'
sub('..*.', '', track)
# copy '.tbi' if the file is 'vcf.gz'
sub('.*\\.', '', track)
substr(track,(nchar(track)+1)-5,nchar(track))
substr(track,(nchar(track)+1)-7,nchar(track))
extension_file == '.vcf.gz'
# copy '.tbi' if the file is 'vcf.gz'
extension_file <- substr(track,(nchar(track)+1)-7,nchar(track))
extension_file == '.vcf.gz'
if(extension_file == '.vcf.gz'){
file.copy(paste0(track, '.tbi'), file.path(path_local_hub_name, assembly_database))
}
track
# copy the file into the assemblyDatabase hub folder
file.copy(track, file.path(path_local_hub_name, assembly_database))
# copy '.tbi' if the file is 'vcf.gz'
extension_file <- substr(track,(nchar(track)+1)-7,nchar(track))
# copy '.tbi' if the file is 'vcf.gz'
extension_file <- substr(track,(nchar(track)+1)-7,nchar(track))
if(extension_file == '.vcf.gz'){
file.copy(paste0(track, '.tbi'), file.path(path_local_hub_name, assembly_database))
}
devtools::load_all()
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
assembly_database <- 'hg38'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
gattaca_user = gattaca_user)
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
quote_label <- 'example'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label,
gattaca_user = gattaca_user)
devtools::load_all()
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
quote_label <- 'example'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label,
gattaca_user = gattaca_user)
path_tracks <- path
hub_name <- 'example_hub_multiple'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using different type of files and parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
gattaca_user <- 'msubirana@gattaca'
# Generation of the basic hub structure
hubGenerator(path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
description_url = NULL,
assembly_database = assembly_database,
gattaca_html= gattaca_html,
gattaca_folder_hub = gattaca_folder_hub)
# Delete old trackDb if exists (avoid duplicates in the file)
unlink(file.path(path_local_hub_name, assembly_database, 'trackDb.txt'))
pattern_tracks <- '.vcf.gz$'
# Upload "vcf.gz" files
pattern_tracks <- '.vcf.gz$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = 'vcf_examples'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
tracks
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
devtools::load_all()
# Download example data
path <- downloadUcschubgenerator()
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
quote_label <- 'example'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label,
gattaca_user = gattaca_user)
path_tracks <- path
hub_name <- 'example_hub_multiple'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using different type of files and parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
gattaca_user <- 'msubirana@gattaca'
# Generation of the basic hub structure
hubGenerator(path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
description_url = NULL,
assembly_database = assembly_database,
gattaca_html= gattaca_html,
gattaca_folder_hub = gattaca_folder_hub)
# Delete old trackDb if exists (avoid duplicates in the file)
unlink(file.path(path_local_hub_name, assembly_database, 'trackDb.txt'))
# Upload "vcf.gz" files
pattern_tracks <- '.vcf.gz$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = 'vcf_examples'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# Upload "bw" files with parameters 1
pattern_tracks <- '_t1.bw$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = '_bw_examples1'
type <- 'bigWig'
visibility <- 'full'
color <- '255, 204, 153'
autoScale <- 'on'
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# Upload "bw" files with parameters 2
pattern_tracks <- '_t2.bw$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = '_bw_examples2'
type <- 'bigWig'
visibility <- 'full'
color <- '153, 204, 255'
autoScale <- 'on'
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# rsync to the gattaca server and generate the UCSC link
rsyncHub (gattaca_html= gattaca_html,
gattaca_dir = gattaca_dir,
gattaca_folder_hub = gattaca_folder_hub,
gattaca_user = gattaca_user,
path_local_hub = path_local_hub)
devtools::document()
library(devtools)
install_github("msubirana/ucschubgenerator")
# Import libraries
library(ucschubgenerator)
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
quote_label <- 'example'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label,
gattaca_user = gattaca_user)
path_tracks <- path
hub_name <- 'example_hub_multiple'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using different type of files and parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
gattaca_user <- 'msubirana@gattaca'
# Generation of the basic hub structure
hubGenerator(path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
description_url = NULL,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub)
# Delete old trackDb if exists (avoid duplicates in the file)
unlink(file.path(path_local_hub_name, assembly_database, 'trackDb.txt'))
# Upload "vcf.gz" files
pattern_tracks <- '.vcf.gz$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = 'vcf_examples'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
for(track in tracks){
trackhubTrack(path_local_hub = path_local_hub,
hub_name = hub_name,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
for(track in tracks){
trackhubTrack(path_local_hub = path_local_hub,
hub_name = hub_name,
gattaca_folder_hub = gattaca_folder_hub
assembly_database = assembly_database,
for(track in tracks){
trackhubTrack(path_local_hub = path_local_hub,
hub_name = hub_name,
gattaca_folder_hub = gattaca_folder_hub,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# Upload "bw" files with parameters 1
pattern_tracks <- '_t1.bw$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = '_bw_examples1'
type <- 'bigWig'
visibility <- 'full'
color <- '255, 204, 153'
autoScale <- 'on'
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
hub_name = hub_name,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# Upload "bw" files with parameters 2
pattern_tracks <- '_t2.bw$'
tracks <- list.files(path_tracks,
pattern = pattern_tracks,
full.names = T)
quote_label = '_bw_examples2'
type <- 'bigWig'
visibility <- 'full'
color <- '153, 204, 255'
autoScale <- 'on'
for(track in tracks){
trackhubTrack(gattaca_html = gattaca_html,
gattaca_folder_hub = gattaca_folder_hub,
path_local_hub = path_local_hub,
hub_name = hub_name,
assembly_database = assembly_database,
track = track,
short_label = short_label,
long_label = long_label,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label)
}
# rsync to the gattaca server and generate the UCSC link
rsyncHub (gattaca_folder_hub = gattaca_folder_hub,
gattaca_user = gattaca_user,
path_local_hub = path_local_hub,
hub_name = hub_name)
library(devtools)
install_github("msubirana/ucschubgenerator")
# Import libraries
library(ucschubgenerator)
# Download example data
path <- downloadUcschubgenerator()
# Import libraries
library(ucschubgenerator)
# Download example data
path <- downloadUcschubgenerator()
library(devtools)
install_github("msubirana/ucschubgenerator")
# Define variables
path_tracks <- path
pattern_tracks <- '.vcf.gz$'
hub_name <- 'example_hub_unique'
path_local_hub <- file.path(path, 'hubs')
dir.create(path_local_hub)
hub_short_label <- hub_name
hub_long_label <- 'Example of ucschubgenerator using only one type of file with a unique set of parameters'
email_address <- 'example@email.com'
assembly_database <- 'hg38'
gattaca_folder_hub <- 'exampleHub'
type <- 'vcfTabix'
visibility <- 'dense'
color <- '0, 0, 0'
gattaca_user <- 'msubirana@gattaca'
quote_label <- 'example'
batchHubGenerator(path_tracks = path_tracks,
pattern_tracks = pattern_tracks,
path_local_hub = path_local_hub,
hub_name = hub_name,
hub_short_label = hub_short_label,
hub_long_label = hub_long_label,
email_address = email_address,
assembly_database = assembly_database,
gattaca_folder_hub = gattaca_folder_hub,
type = type,
visibility = visibility,
color = color,
quote_label = quote_label,
gattaca_user = gattaca_user)
devtools::document()
devtools::document()
getwd()
